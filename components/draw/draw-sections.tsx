// import { Translate, useTranslate } from '~/i18n';
// import { motion } from 'framer-motion';
// import classNames from 'classnames';
// import React, { useState } from 'react';
// import { NextLink } from '~/i18n';
// import CheckInvitationForm from '../join/check-invitation-form';
// import Cookies from 'js-cookie';
// import ButtonBtn from '../shared/buttons/button-btn';
// import Image from '../shared/image';
// import list from 'data/MOCK_DATA.json';
// import _, { flatten, forEach } from 'underscore';
// import ReactRoller from 'react-random-roller';
// import { useWindowResize } from 'react-advanced-cropper';
// import useWindowSize from 'react-use/lib/useWindowSize';
// import Confetti from 'react-confetti';
import React from '@vercel/analytics/react';
import classNames from 'classnames';
import names from 'data/MOCK_DATA.json';
import { Fragment, useEffect, useState } from 'react';
import { NextLink, Translate, useTranslate } from '~/i18n';
import ButtonBtn from '../shared/buttons/button-btn';
import Image from '../shared/image';
import Confetti from './confetti';

/******************************************************************
 *
 *  THIS COMPONENT WAS GENERATED BY NEXTCRAZY-CLI
 *
 ******************************************************************/
type DrawSectionsProps = {
   id: string;
};

type Person = {
   id: number;
   first_name: string;
   last_name: string;
};
const DrawSections = ({ id }: DrawSectionsProps) => {
   // const [interval, setInterval] = useState(false);

   const [isExploding, setIsExploding] = useState(false);

   const { translate } = useTranslate();
   const interval = 50;

   const getTitle = (id: string) => {
      switch (id) {
         case '1':
            return <Translate id="web:draw_1_winner" />;
         case '3':
            return <Translate id="web:draw_3_winner" />;
         case '10':
            return <Translate id="web:draw_10_winner" />;
         default:
            return `Draw ${id} winners`;
      }
   };
   const [name, setName] = useState<Person>();
   const [isRendering, setIsRendering] = useState(false);
   const [hasWinner, setHasWinner] = useState<Person[]>([]);

   useEffect(() => {
      if (isRendering) {
         const i = setInterval(() => {
            setName(names[Math.floor(Math.random() * names.length)]);
         }, interval);
         return () => clearInterval(i);
      }
   });
   // useEffect(() => {
   //    setHeight(ref?.current?.h);
   //    setHeight(ref?.current?.clientHeight);
   // });

   // useEffect(() => {
   //    if (!elRef?.current?.clientHeight) {
   //       return;
   //    }
   //    setHeight(elRef?.current?.clientHeight);
   // }, [elRef?.current?.clientHeight]);
   // useEffect(() => {
   //    setHeight(elementRef &&elementRef.current.clientHeight);
   // }, []); //empty dependency array so it only runs once at render

   const getWinner = () => {
      const arr = [] as Person[];

      for (let index = 0; index < parseInt(id); index++) {
         arr.push(names[Math.floor(Math.random() * names.length)]);
      }
      setIsExploding(true);
      setHasWinner([...hasWinner, ...arr]);
      setIsRendering(false);
   };
   const startOver = () => {
      setHasWinner([]);
      setIsRendering(false);
   };
   return (
      <section>
         <div className="container relative">
            <div className="row">
               <div className="col-12 mx-auto pt-10 text-center">
                  <div className="relative ">
                     <div className="mx-auto h-[80px] w-[200px] md:h-[100px] md:w-[250px]">
                        <Image
                           src="/images/zatca.png"
                           alt="zatca logo"
                           // width="150"
                           // height="71"
                           layout="fill"
                           objectFit="contain"
                           className=""
                        />
                     </div>
                     <div className="mt-8 text-white">
                        {hasWinner.length > 0 ? (
                           <h1 className="text-3xl md:text-4xl">
                              <Translate id="web:congratulations" />
                           </h1>
                        ) : (
                           <h1 className="text-3xl md:text-4xl">{getTitle(id)}</h1>
                        )}
                     </div>
                  </div>
               </div>
            </div>
            <Fragment>
               {hasWinner.length === 0 ? (
                  <Fragment>
                     <div className="row pt-5">
                        <div className="md:col-6 md:offset-3">
                           <div className="rounded-full bg-[#335b72cc] py-10 shadow-sm ">
                              <div className="flex justify-center text-xl font-bold text-white md:text-4xl">
                                 {isRendering ? (
                                    name?.last_name + ' ' + name?.last_name
                                 ) : (
                                    <Translate id="web:click_to_start" />
                                 )}
                              </div>
                           </div>
                        </div>
                     </div>

                     <div className="row">
                        <div className="col-12 relative z-10 mx-auto mt-10 sm:col-8 md:col-6 lg:col-4">
                           {isRendering && (
                              <ButtonBtn
                                 id="show-btn" //* for test cases
                                 // loading={loading}
                                 callBack={() => getWinner()}
                                 text={translate({ id: 'web:show_a_winner' })}
                                 noIcon
                              />
                           )}
                           {!isRendering && (
                              <ButtonBtn
                                 id="draw-btn" //* for test cases
                                 // loading={loading}
                                 callBack={() => setIsRendering(!isRendering)}
                                 text={translate({ id: 'web:draw' })}
                                 noIcon
                              />
                           )}
                        </div>
                     </div>
                  </Fragment>
               ) : (
                  <Fragment>
                     {isExploding && <Confetti />}
                     {/* <div className="absolute inset-0 h-full w-full bg-black ">
                        <ConfettiExplosion
                           height={1500}
                           width={1500}
                           duration={3000}
                           // force={0.6}
                           // duration={5000}
                           // particleCount={200}
                        />
                     </div> */}
                     <div className="mt-10">
                        <div className="row">
                           <div className="md:col-4 md:offset-4">
                              {hasWinner.map((item, index) => (
                                 <div key={index} className="mb-4">
                                    <div className="flex space-x-4 rounded-full bg-white p-3 text-center text-[#29526a] rtl:space-x-reverse">
                                       <div className="flex h-8 w-8 items-center justify-center rounded-full bg-[#29526a] text-white">
                                          {index + 1}
                                       </div>
                                       <div className="text-lg md:text-2xl">
                                          {item.first_name + ' ' + item.last_name}
                                       </div>
                                    </div>
                                 </div>
                              ))}
                           </div>
                        </div>
                        <div className="row">
                           <div className="col-12 relative z-10 mx-auto mt-10 sm:col-8 md:col-6 lg:col-4">
                              <ButtonBtn
                                 id="reset-btn" //* for test cases
                                 // loading={loading}
                                 callBack={() => startOver()}
                                 text={translate({ id: 'web:reset' })}
                                 noIcon
                              />
                           </div>
                        </div>
                     </div>
                  </Fragment>
               )}
            </Fragment>
            <div className="row py-24">
               <div className="mx-auto  md:col-3">
                  <NextLink
                     href={`/`}
                     className={classNames(
                        'block  px-2 py-1 text-center font-semibold text-white underline transition-colors duration-150  rtl:justify-end',
                        'focus:border-white focus:outline-none focus:ring focus:ring-white focus:ring-opacity-50 '
                     )}>
                     <Translate id="web:back_to_homepage" />
                  </NextLink>
               </div>
            </div>
         </div>
      </section>
   );
};

export default DrawSections;
